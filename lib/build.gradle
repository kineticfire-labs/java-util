/*                                                                                                                                                                          
 * (c) Copyright 2023 KineticFire. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


plugins {
    // Apply the groovy Plugin to add support for Groovy.
    id 'groovy'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral( )
}


dependencies {
    // Use the latest Groovy version for building this library
    implementation 'org.apache.groovy:groovy-all:' + getProperty( 'groovy-all.version' )

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:' + getProperty( 'guava.version' )

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:' + getProperty( 'spock-core.version' )
    testImplementation 'org.junit.jupiter:junit-jupiter-api:' + getProperty( 'junit.version' )

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:' + getProperty( 'apache-commons-math3.version' )
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of( getProperty( 'javaLanguage.version' ) )
    }
}

jar {
    archiveBaseName = 'java-util'
    archiveVersion = getProperty( 'java-util.jar.version' )

    manifest {
        attributes(
            'Implementation-Vendor'  : 'KineticFire Labs',
            'Implementation-Title'   : 'java-util',
            'Implementation-Version' : getProperty( 'java-util.jar.version'),
            'Implementation-Project' : 'java-util',
            'Implementation-Release' : getProperty( 'project.release'),
        )
    }
}

tasks.named( 'test' ) {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform( )
}
